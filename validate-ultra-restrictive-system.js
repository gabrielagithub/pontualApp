#!/usr/bin/env node

/**
 * Valida√ß√£o Manual do Sistema Ultra Restritivo WhatsApp
 * Este script testa todos os cen√°rios cr√≠ticos do sistema de seguran√ßa
 */

import { WhatsappService } from './server/whatsapp-service.js';
import { DatabaseStorage } from './server/database-storage.js';

console.log('üîí INICIANDO VALIDA√á√ÉO DO SISTEMA ULTRA RESTRITIVO');
console.log('=' .repeat(60));

const storage = new DatabaseStorage();
const whatsappService = new WhatsappService();

// Fun√ß√£o para simular mensagem
async function simulateMessage(integrationId, phoneNumber, message, description) {
  console.log(`\nüì± TESTE: ${description}`);
  console.log(`   N√∫mero: ${phoneNumber}`);
  console.log(`   Mensagem: "${message}"`);
  
  try {
    await whatsappService.processIncomingMessage(
      integrationId,
      phoneNumber,
      message,
      `test-${Date.now()}`,
      '120363419788242278@g.us'
    );
    console.log('   ‚úÖ Processamento conclu√≠do');
  } catch (error) {
    console.log('   üö´ Erro durante processamento:', error.message);
  }
}

async function runTests() {
  try {
    // 1. TESTE: Sistema sem n√∫meros configurados
    console.log('\nüîí CEN√ÅRIO 1: Sistema sem n√∫meros configurados');
    await storage.updateWhatsappIntegration(2, {
      authorizedNumbers: ''
    });
    
    await simulateMessage(2, '5531999999999@c.us', 'tarefas', 'Qualquer n√∫mero com sistema vazio');
    
    // 2. TESTE: Lista vazia
    console.log('\nüîí CEN√ÅRIO 2: Lista de n√∫meros vazia');
    await storage.updateWhatsappIntegration(2, {
      authorizedNumbers: '[]'
    });
    
    await simulateMessage(2, '5531999999999@c.us', 'tarefas', 'Qualquer n√∫mero com lista vazia');
    
    // 3. TESTE: N√∫mero autorizado
    console.log('\nüîí CEN√ÅRIO 3: N√∫mero autorizado');
    await storage.updateWhatsappIntegration(2, {
      authorizedNumbers: '["5531999999999@c.us"]'
    });
    
    await simulateMessage(2, '5531999999999@c.us', 'tarefas', 'N√∫mero autorizado processando comando');
    
    // 4. TESTE: N√∫mero N√ÉO autorizado
    console.log('\nüîí CEN√ÅRIO 4: N√∫mero N√ÉO autorizado');
    await simulateMessage(2, '5531888888888@c.us', 'tarefas', 'N√∫mero n√£o autorizado tentando comando');
    
    // 5. VERIFICAR LOGS DE SEGURAN√áA
    console.log('\nüìä VERIFICANDO LOGS DE SEGURAN√áA');
    const logs = await storage.getWhatsappLogs(2, 10);
    console.log(`   Total de logs: ${logs.length}`);
    
    const blockedLogs = logs.filter(log => log.eventType === 'BLOCKED_INCOMING');
    console.log(`   Logs de bloqueio: ${blockedLogs.length}`);
    
    if (blockedLogs.length > 0) {
      console.log('   ‚úÖ Sistema est√° registrando bloqueios corretamente');
    } else {
      console.log('   ‚ö†Ô∏è Nenhum log de bloqueio encontrado');
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log('‚úÖ VALIDA√á√ÉO CONCLU√çDA');
    console.log('üîí Sistema Ultra Restritivo funcionando conforme esperado');
    
  } catch (error) {
    console.error('‚ùå ERRO na valida√ß√£o:', error);
  } finally {
    // Restaurar configura√ß√£o padr√£o
    await storage.updateWhatsappIntegration(2, {
      authorizedNumbers: '["5531999999999@c.us"]'
    });
    process.exit(0);
  }
}

// Executar testes
runTests();